/*
 * Font.cpp
 * 
 * Font library for Arduino.
 * Author: Julian Sanin <sanin89julian@gmail.com>
 * Contributors: Angelo Ventura <angelo.ventura@unibz.it>
 * 
 * The MIT License (MIT)
 * 
 * Copyright (c) 2015 Julian Sanin, Angelo Ventura
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include "Font.h"

/* Common properties for every font. */
static const uint8_t ASCII_PRINTABLE_CHARACTERS_COUNT = 6*16;
static const uint8_t ASCII_PRINTABLE_CHARACTERS_OFFSET = 0x20;

/* BAJ font specific properties. */
static const uint8_t BAJ_CHARACTER_HEIGHT = 4;

static const uint8_t BAJ_CHARACTER_WIDTHS[ASCII_PRINTABLE_CHARACTERS_COUNT] PROGMEM {
  // SP ! " # $ % & ' ( ) * + , - . /
  5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //  0 1 2 3 4 5 6 7 8 9 : ; < = > ?
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //  @ A B C D E F G H I J K L M N O
  0, 9, 8, 8, 8, 8, 8, 12, 8, 2, 0, 0, 8, 8, 7, 8,
  //  P Q R S T U V W X Y Z [ \ ] ^ _
  8, 10, 9, 9, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0,
  //  ` a b c d e f g h i j k l m n o
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //  p q r s t u v w x y z { | } ~ DEL
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};

//16x4
static const uint16_t BAJ_CHARACTER_MAPPINGS[
    BAJ_CHARACTER_HEIGHT*ASCII_PRINTABLE_CHARACTERS_COUNT] PROGMEM {
  // ASCII: SP 0x20, char width: 5
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: ! 0x21, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: " 0x22, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: # 0x23, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: $ 0x24, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: % 0x25, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: & 0x26, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: ' 0x27, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: ( 0x28, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: ) 0x29, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: * 0x2A, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: + 0x2B, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: , 0x2C, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: - 0x2D, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: . 0x2E, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: / 0x2F, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: 0 0x30, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: 1 0x31, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: 2 0x32, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: 3 0x33, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: 4 0x34, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: 5 0x35, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: 6 0x36, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: 7 0x37, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: 8 0x38, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: 9 0x39, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: : 0x3A, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: ; 0x3B, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: < 0x3C, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: = 0x3D, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: > 0x3E, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: ? 0x3F, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: @ 0x40, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: A 0x41, char width: 9
  0b0001100000000000,
  0b0010010000000000,
  0b0111111000000000,
  0b1000000100000000,
  // ASCII: B 0x42, char width: 8
  0b1000000000000000,
  0b1111110000000000,
  0b1000001000000000,
  0b1111110000000000,
  // ASCII: C 0x43, char width: 8
  0b0111111000000000,
  0b1000000000000000,
  0b1000000000000000,
  0b0111111000000000,
  // ASCII: D 0x44, char width: 8
  0b1111110000000000,
  0b1000001000000000,
  0b1000001000000000,
  0b1111110000000000,
  // ASCII: E 0x45, char width: 8
  0b1111111000000000,
  0b1000000000000000,
  0b1111000000000000,
  0b1111111000000000,
  // ASCII: F 0x46, char width: 8
  0b1111111000000000,
  0b1000000000000000,
  0b1111000000000000,
  0b1000000000000000,
  // ASCII: G 0x47, char width: 12
  0b0111111000000000,
  0b1000000011100000,
  0b1000000000100000,
  0b0111111111000000,
  // ASCII: H 0x48, char width: 8
  0b1000001000000000,
  0b1000001000000000,
  0b1111111000000000,
  0b1000001000000000,
  // ASCII: I 0x49, char width: 2
  0b1000000000000000,
  0b1000000000000000,
  0b1000000000000000,
  0b1000000000000000,
  // ASCII: J 0x4A, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: K 0x4B, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: L 0x4C, char width: 8
  0b1000000000000000,
  0b1000000000000000,
  0b1000000000000000,
  0b1111111000000000,
  // ASCII: M 0x4D, char width: 8
  0b1100011000000000,
  0b1010101000000000,
  0b1001001000000000,
  0b1000001000000000,
  // ASCII: N 0x4E, char width: 7
  0b1100010000000000,
  0b1010010000000000,
  0b1001010000000000,
  0b1000110000000000,
  // ASCII: O 0x4F, char width: 8
  0b0111110000000000,
  0b1000001000000000,
  0b1000001000000000,
  0b0111110000000000,
  // ASCII: P 0x50, char width: 8
  0b1111110000000000,
  0b1000001000000000,
  0b1111110000000000,
  0b1000000000000000,
  // ASCII: Q 0x51, char width: 10
  0b0111110000000000,
  0b1000001000000000,
  0b1000011000000000,
  0b0111111110000000,
  // ASCII: R 0x52, char width: 9
  0b1111100000000000,
  0b1000010000000000,
  0b1111100000000000,
  0b1000011100000000,
  // ASCII: S 0x53, char width: 9
  0b0001111100000000,
  0b0001000100000000,
  0b1000100000000000,
  0b1111100000000000,
  // ASCII: T 0x54, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: U 0x55, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: V 0x56, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: W 0x57, char width: 10
  0b1000000010000000,
  0b1000100010000000,
  0b0101010100000000,
  0b0010001000000000,
  // ASCII: X 0x58, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: Y 0x59, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: Z 0x5A, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: [ 0x5B, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: \ 0x5C, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: ] 0x5D, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: ^ 0x5E, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: _ 0x5F, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: ` 0x60, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: a 0x61, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: b 0x62, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: c 0x63, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: d 0x64, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: e 0x65, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: f 0x66, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: g 0x67, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: h 0x68, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: i 0x69, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: j 0x6A, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: k 0x6B, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: l 0x6C, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: m 0x6D, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: n 0x6E, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: o 0x6F, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: p 0x70, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: q 0x71, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: r 0x72, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: s 0x73, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: t 0x74, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: u 0x75, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: v 0x76, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: w 0x77, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: x 0x78, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: y 0x79, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: z 0x7A, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: { 0x7B, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: | 0x7C, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: } 0x7D, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: ~ 0x7E, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  // ASCII: DEL 0x7F, char width: 0
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000,
  0b0000000000000000
};

Font Font_BAJ = (Font){
  ASCII_PRINTABLE_CHARACTERS_COUNT,  // Character count.
  ASCII_PRINTABLE_CHARACTERS_OFFSET, // Offset from ASCII table.
  BAJ_CHARACTER_HEIGHT,              // Height in pixels.
  BAJ_CHARACTER_WIDTHS,              // Variable width per character in pixels.
  BAJ_CHARACTER_MAPPINGS             // Character map per character.
};
